{"version":3,"sources":["../src/datasource.js"],"names":[],"mappings":";;;;;;;;;;;;;AAAO;;AACC;;;;;;;;;;;;;;;;;;;;;0CAEK;AAEX,iBAFW,wBAEX,CAAY,gBAAZ,EAA8B,KAA9B,EAAqC,UAArC,EAAkD;gCAFvC,0BAEuC;;AAChD,eAAK,gBAAL,GAAwB,gBAAxB,CADgD;AAEhD,eAAK,GAAL,GAAW,iBAAiB,GAAjB,CAFqC;AAGhD,eAAK,eAAL,GAAuB,iBAAiB,eAAjB,CAHyB;AAIhD,eAAK,KAAL,GAAa,KAAb,CAJgD;AAKhD,eAAK,UAAL,GAAkB,UAAlB,CALgD;AAMhD,eAAK,cAAL,GAAsB,EAAtB,CANgD;SAAlD;;qBAFW;;kCAWH,SAAS;AACf,oBAAQ,GAAR,GAAc,KAAK,GAAL,GAAW,QAAQ,GAAR,CADV;AAEf,gBAAI,KAAK,eAAL,EAAsB;AACxB,sBAAQ,eAAR,GAA0B,IAA1B,CADwB;aAA1B;AAGA,mBAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC,OAAlC,CAAP,CALe;;;;gCAQX,SAAS;AACb,gBAAI,UAAU,KAAK,cAAL,CAAoB,QAAQ,OAAR,CAA9B,CADS;AAEb,gBAAI,OAAJ,EAAa;AACX,qBAAO,QAAQ,OAAR,CAAgB,OAAhB,CAAP,CADW;aAAb;;AAIA,iBAAK,cAAL,CAAoB,QAAQ,OAAR,CAApB,GAAuC,UAAU,IAAI,aAAJ,CAAkB,OAAlB,EAA2B,IAA3B,CAAV,CAN1B;AAOb,oBAAQ,KAAR,GAPa;;AASb,mBAAO,QAAQ,OAAR,CAAgB,OAAhB,CAAP,CATa;;;;uCAYF;;;AACX,gBAAI,KAAK,YAAL,EAAmB;AACrB,qBAAO,QAAQ,OAAR,CAAgB,KAAK,YAAL,CAAvB,CADqB;aAAvB;;AAIA,mBAAO,KAAK,OAAL,CAAa,EAAE,QAAQ,KAAR,EAAe,KAAK,UAAL,EAA9B,EAAiD,IAAjD,CAAsD,eAAO;AAClE,kBAAI,CAAC,IAAI,IAAJ,EAAU;AACb,uBAAO,EAAP,CADa;eAAf;;AAIA,oBAAK,YAAL,GAAoB,IAAI,IAAJ,CAAS,KAAT,CAAe,IAAf,EAAqB,MAArB,CAA4B,aAAK;AACnD,uBAAO,EAAE,OAAF,CAAU,GAAV,MAAmB,CAAnB,CAD4C;eAAL,CAA5B,CAEjB,GAFiB,CAEb,aAAK;AACV,oBAAI,SAAS,EAAE,KAAF,CAAQ,GAAR,EAAa,CAAb,CAAT,CADM;AAEV,uBAAO,EAAE,MAAM,MAAN,EAAc,OAAO,MAAP,EAAvB,CAFU;eAAL,CAFP,CALkE;;AAYlE,qBAAO,MAAK,YAAL,CAZ2D;aAAP,CAA7D,CALW;;;;eA/BF","file":"datasource.js","sourcesContent":["import moment from 'moment';\nimport {StreamHandler} from './stream_handler';\n\nexport class PrometheusPullDatasource {\n\n  constructor(instanceSettings, $http, backendSrv)  {\n    this.instanceSettings = instanceSettings;\n    this.url = instanceSettings.url;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.$http = $http;\n    this.backendSrv = backendSrv;\n    this.streamHandlers = {};\n  }\n\n  request(options) {\n    options.url = this.url + options.url;\n    if (this.withCredentials) {\n      options.withCredentials = true;\n    }\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  query(options) {\n    var handler = this.streamHandlers[options.panelId];\n    if (handler) {\n      return Promise.resolve(handler);\n    }\n\n    this.streamHandlers[options.panelId] = handler = new StreamHandler(options, this);\n    handler.start();\n\n    return Promise.resolve(handler);\n  }\n\n  getMetrics() {\n    if (this.metricsCache) {\n      return Promise.resolve(this.metricsCache);\n    }\n\n    return this.request({ method: 'get', url: '/metrics' }).then(res => {\n      if (!res.data) {\n        return [];\n      }\n\n      this.metricsCache = res.data.split(/\\n/).filter(l => {\n        return l.indexOf('#') !== 0;\n      }).map(l => {\n        var metric = l.split(' ')[0];\n        return { text: metric, value: metric };\n      });\n\n      return this.metricsCache;\n    });\n  }\n}\n\n"]}